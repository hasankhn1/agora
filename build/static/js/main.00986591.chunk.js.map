{"version":3,"sources":["components/ChannelForm.js","components/Call.js","App.js","serviceWorker.js","index.js"],"names":["ChannelForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChange","e","_e$target","target","name","value","setState","defineProperty","onSubmit","preventDefault","console","log","state","channel","selectChannel","react_default","a","createElement","className","class","for","type","id","placeholder","Component","client","AgoraRTC","createClient","mode","codec","USER_ID","uuid","APP_ID","Call","localStream","createStream","streamID","audio","video","screen","mediaSource","enabledCamera","enabledMic","isHost","isJoiner","remoteStreams","initLocalStream","init","play","err","initClient","subscribeToClient","on","onStreamAdded","onRemoteClientAdded","onStreamRemoved","onPeerLeave","screenShare","setScreenProfile","evt","stream","getId","objectSpread","remoteStream","subscribe","joinChannel","uid","join","publish","streamId","stop","onLeave","leave","cameraEnable","enableVideo","disableVideo","micEnableDisable","enableAudio","disableAudio","onLeaveMeeting","prevProps","prevState","_this2","style","height","width","keys","map","key","concat","onClick","index_es","icon","faCamera","faMicrophone","App","ChannelForm_ChannelForm","Call_Call","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.00986591.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport default class ChannelForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      channel: \"\"\n    };\n  }\n  onChange = e => {\n    let { name, value } = e.target;\n    this.setState({ [name]: value });\n  };\n  onSubmit = e => {\n    e.preventDefault();\n    console.log(\"Submiting \", this.state.channel);\n    this.props.selectChannel(this.state.channel);\n    this.setState({ channel: \"\" });\n  };\n  render() {\n    return (\n      <div className='row text-center'>\n      <h2 className='text-center mt-3 col-12'>Agora Chat Application</h2>\n      <form class=\"form-inline mt-5 text-center col-6 offset-3\" onSubmit={this.onSubmit}>\n        <div class=\"form-group mx-sm-3 mb-2\">\n          <label for=\"channel2\" className=\"mr-3\">Channel Name</label>\n          <input type=\"text\" class=\"form-control\"\n            name=\"channel\"\n            id=\"channel2\"\n            placeholder=\"Enter channel name\"\n            value={this.state.channel}\n            onChange={this.onChange} />\n        </div>\n        <button type=\"submit\" class=\"btn btn-primary mb-2\">Join Channel</button>\n      </form>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport AgoraRTC from \"agora-rtc-sdk\";\nimport { v4 as uuid } from 'uuid';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCamera, faMicrophone } from '@fortawesome/free-solid-svg-icons'\nlet client = AgoraRTC.createClient({ mode: \"live\", codec: \"h264\" });\n\nconst USER_ID = uuid()\nconst APP_ID = \"1c721d1e1404469382d7d9b70d7f6bfa\";\n\nexport default class Call extends Component {\n  localStream = AgoraRTC.createStream({\n    streamID: USER_ID,\n    audio: true,\n    video: true,\n    screen: false,\n    mediaSource: 'screen'\n  });\n\n  state = {\n    enabledCamera: false,\n    enabledMic: false,\n    isHost: false,\n    isJoiner: false,\n    remoteStreams: []\n  };\n\n  componentDidMount() {\n    this.initLocalStream();\n    this.initClient();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.channel !== this.props.channel && this.props.channel !== \"\") {\n      this.joinChannel();\n    }\n  }\n\n\n\n  initLocalStream = () => {\n    this.localStream.init(\n      () => {\n        console.log(\"getUserMedia successfully\");\n        this.localStream.play(\"agora_local\");\n      },\n      (err) => {\n        console.log(\"getUserMedia failed\", err);\n      }\n    );\n  };\n\n  initClient = () => {\n    client.init(\n      APP_ID,\n      () => {\n        this.setState({isHost: true})\n        console.log(\"AgoraRTC client initialized\");\n      },\n      (err) => {\n        console.log(\"AgoraRTC client init failed\", err);\n      }\n    );\n    this.subscribeToClient();\n  };\n\n  subscribeToClient = () => {\n    client.on(\"stream-added\", this.onStreamAdded);\n    client.on(\"stream-subscribed\", this.onRemoteClientAdded);\n    client.on(\"stream-removed\", this.onStreamRemoved);\n    client.on(\"peer-leave\", this.onPeerLeave);\n  };\n\n  screenShare = () => {\n    this.localStream.setScreenProfile(\"480p_1\")\n\n  }\n\n  onStreamAdded = evt => {\n    let stream = evt.stream;\n    console.log(\"New stream added: \" + stream.getId());\n    this.setState(\n      {\n        remoteStreams: {\n          ...this.state.remoteStream,\n          [stream.getId()]: stream\n        }\n      },\n      () => {\n        client.subscribe(stream, (err) => {\n          console.log(\"Subscribe stream failed\", err);\n        });\n      }\n    );\n  };\n\n  joinChannel = () => {\n    let uid = uuid()\n    client.join(\n      '0061c721d1e1404469382d7d9b70d7f6bfaIABqWt1KsDY3Z/SMaLGV9czji39NYdgMNhx6ExNeh44NAKu95ggAAAAAEAAEa9nrGKZDYAEAAQAXpkNg',\n      this.props.channel,\n      uid,\n      (uid) => {\n        console.log(\"User \" + uid + \" join channel successfully\");\n        client.publish(this.localStream, (err) => {\n          console.log(\"Publish local stream error: \" + err);\n        });\n\n        client.on(\"stream-published\", (evt) => {\n          console.log(\"Publish local stream successfully\");\n        });\n      },\n      (err) => {\n        console.log(\"Join channel failed\", err);\n      }\n    );\n  };\n\n  onRemoteClientAdded = evt => {\n    let remoteStream = evt.stream;\n    this.state.remoteStreams[remoteStream.getId()].play(\n      \"agora_remote \" + remoteStream.getId()\n    );\n  };\n\n  onStreamRemoved = evt => {\n    let stream = evt.stream;\n    if (stream) {\n      let streamId = stream.getId();\n      let { remoteStreams } = this.state;\n\n      stream.stop();\n      delete remoteStreams[streamId];\n\n      this.setState({ remoteStreams });\n\n      console.log(\"Remote stream is removed \" + stream.getId());\n    }\n  };\n\n  onLeave = () => {\n    client.leave(() => {\n      console.log(\"client leaves channel\");\n    }, (err) => {\n      console.log(\"client leave failed \", err);\n      //error handling\n    });\n  }\n\n  cameraEnable = () => {\n    if (this.state.enabledCamera) {\n      this.localStream.enableVideo()\n      this.setState({ enabledCamera: false })\n    } else {\n      this.localStream.disableVideo();\n      this.setState({ enabledCamera: true })\n    }\n  }\n\n  micEnableDisable = () => {\n    if (this.state.enabledMic) {\n      this.localStream.enableAudio();\n      this.setState({ enabledMic: false })\n    } else {\n      this.localStream.disableAudio();\n      this.setState({ enabledMic: true })\n    }\n  }\n\n  onLeaveMeeting = () => {\n    this.localStream.stop()\n    client.leave();\n  }\n\n  onPeerLeave = evt => {\n    let stream = evt.stream;\n    if (stream) {\n      let streamId = stream.getId();\n      let { remoteStreams } = this.state;\n\n      stream.stop();\n      delete remoteStreams[streamId];\n      this.setState({ remoteStreams });\n\n      console.log(evt.uid + \" leaved from this channel\");\n    }\n  };\n\n  render() {\n    return (\n      <div className='row ml-5 mt-5'>\n      <div className='col-md-6'>\n        <div id=\"agora_local\" className= 'img-thumbnail' style={{ height:'400px', width:'500px' }} />\n        </div>\n        <div className='col-md-6'>\n        {Object.keys(this.state.remoteStreams).map(key => {\n          let stream = this.state.remoteStreams[key];\n          let streamId = stream.getId();\n          return (\n            <div key={streamId}>\n              <div\n                id={`agora_remote ${streamId}`}\n                className='img-thumbnail'\n                style={{ height:'400px', width:'500px' }}\n              >\n              </div>\n            </div>\n          );\n        })}\n        </div>\n        <div className='row mt-5'>\n        <button className='btn mr-3' onClick={() => this.cameraEnable()}><FontAwesomeIcon icon={faCamera} /></button>\n        <button className='btn btn mr-3' onClick={() => this.micEnableDisable()}><FontAwesomeIcon icon={faMicrophone} /></button>\n        <button className='btn btn-danger btn mr-3' onClick={(e) => this.onLeaveMeeting(e)}>Leave Meeting</button>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport ChannelForm from \"./components/ChannelForm\";\nimport Call from \"./components/Call\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      channel: \"\"\n    };\n  }\n\n  selectChannel = channel => {\n    this.setState({ channel });\n  };\n\n  render() {\n    return (\n      <div className=\"App container\">\n        <ChannelForm selectChannel={this.selectChannel} />\n        <Call channel={this.state.channel} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n// import 'bootstrap/dist/js/bootstrap.js';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}